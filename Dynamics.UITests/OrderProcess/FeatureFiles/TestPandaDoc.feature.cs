// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dynamics.UITests.OrderProcess.FeatureFiles
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestPandaDoc")]
    [NUnit.Framework.CategoryAttribute("S84643d75")]
    public partial class TestPandaDocFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "S84643d75"};
        
#line 1 "TestPandaDoc.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "OrderProcess/FeatureFiles", "TestPandaDoc", "Tests for contract management tool involving create of new business opportunity/o" +
                    "rder scenario and subscription switch", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As user I am able to create contract for a new business so that, I create offer l" +
            "etter, let it sign and order with signed document is prepared to be invoiced")]
        [NUnit.Framework.CategoryAttribute("Td3ac1a63")]
        [NUnit.Framework.TestCaseAttribute("<RANDOM>", "Czech republic", "Agriculture;Education", "<RANDOM>", "<RANDOM>", "<RANDOM>", "Panda example opp", "New Business", "Direct", "Business - 1 Website Auto-Scalable Subscription (Yearly)", null)]
        public void AsUserIAmAbleToCreateContractForANewBusinessSoThatICreateOfferLetterLetItSignAndOrderWithSignedDocumentIsPreparedToBeInvoiced(string accountName, string country, string industry, string lastName, string email, string firstName, string opportunityTopic, string type, string source, string oppExistingProduct, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Td3ac1a63"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("AccountName", accountName);
            argumentsOfScenario.Add("Country", country);
            argumentsOfScenario.Add("Industry", industry);
            argumentsOfScenario.Add("LastName", lastName);
            argumentsOfScenario.Add("Email", email);
            argumentsOfScenario.Add("FirstName", firstName);
            argumentsOfScenario.Add("OpportunityTopic", opportunityTopic);
            argumentsOfScenario.Add("Type", type);
            argumentsOfScenario.Add("Source", source);
            argumentsOfScenario.Add("OppExistingProduct", oppExistingProduct);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As user I am able to create contract for a new business so that, I create offer l" +
                    "etter, let it sign and order with signed document is prepared to be invoiced", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given("user is in the accounts page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.And("user creates new account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "AccountName",
                            "Country"});
                table21.AddRow(new string[] {
                            string.Format("{0}", accountName),
                            string.Format("{0}", country)});
#line 10
 testRunner.And("account data is set", ((string)(null)), table21, "And ");
#line hidden
#line 13
 testRunner.And("user goes to \"Details\" tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Industry"});
                table22.AddRow(new string[] {
                            string.Format("{0}", industry)});
#line 14
 testRunner.And("account data is set", ((string)(null)), table22, "And ");
#line hidden
#line 17
 testRunner.And("user sets account type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.And("user saves account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.And("user goes to \"Summary\" tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.And("user opens quick create contact from primary contact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "LastName",
                            "FirstName",
                            "Email"});
                table23.AddRow(new string[] {
                            string.Format("{0}", lastName),
                            string.Format("{0}", firstName),
                            string.Format("{0}", email)});
#line 21
 testRunner.And("quick create contact data is set", ((string)(null)), table23, "And ");
#line hidden
#line 24
 testRunner.And("user saves quick create", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And("user saves account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.And("primary contact is memorized as \"contract contact\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.And("user creates a new opportunity from account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Type",
                            "Source"});
                table24.AddRow(new string[] {
                            string.Format("{0}", opportunityTopic),
                            string.Format("{0}", type),
                            string.Format("{0}", source)});
#line 28
 testRunner.And("opportunity data is set", ((string)(null)), table24, "And ");
#line hidden
#line 31
 testRunner.And("contact \"contract contact\" is set for opportunity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And("user saves opportunity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.And(string.Format("the opportunity has an order product with {0}", oppExistingProduct), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.And("user closes entity going back to opportunity with saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.And("owner for opportunity is changed to \"svc-CRM-System@kentico.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
 testRunner.And("user saves opportunity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.And("user activates opportunity BPF stage \"New\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.And("user leaves stage \"New\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "OriginatingLeadBPF",
                            "EstimateCloseDateBPF"});
                table25.AddRow(new string[] {
                            "John Underlord",
                            "<NOW>"});
#line 39
 testRunner.And("opportunity data is set", ((string)(null)), table25, "And ");
#line hidden
#line 42
 testRunner.And("user closes stage \"Mutual Interest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.And("user saves opportunity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
 testRunner.And("user creates a new order from opportunity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "PriceIndexationType"});
                table26.AddRow(new string[] {
                            "According to pricelist"});
#line 45
 testRunner.And("the order data is set", ((string)(null)), table26, "And ");
#line hidden
#line 48
 testRunner.And("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
 testRunner.And("user opens opportunity lookup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
 testRunner.And("user creates an offer letter", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
