// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dynamics.UITests.OrderProcess.FeatureFiles
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestOrderProcessing")]
    [NUnit.Framework.CategoryAttribute("S15a9d3d7")]
    public partial class TestOrderProcessingFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "S15a9d3d7"};
        
#line 1 "TestOrderProcessing.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "OrderProcess/FeatureFiles", "TestOrderProcessing", "/// https://kentico.atlassian.net/browse/IN-936", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As user I want an order containing new subscription product has properly set para" +
            "meters for its product and for its license after processing")]
        [NUnit.Framework.CategoryAttribute("Td1dac3e4")]
        [NUnit.Framework.TestCaseAttribute("NewSubscriptionLicense_TC01", "Kentico software CZ s.r.o. - International Office", "CZK", "Kentico CZK - 2023/07/01", "test-order", "JayV", "test-order", "Business - 1 Website Auto-Scalable Subscription (Yearly)", "According to pricelist", "12.00", "12", "Business - 1 Website Auto-Scalable Subscription (Yearly)", "test-order", "CZK", "Business - 1 Website Auto-Scalable Subscription (Yearly)", "False", "SubscriptionLicense", null)]
        [NUnit.Framework.TestCaseAttribute("NewSubscriptionLicense_TC02", "Kentico software CZ s.r.o. - International Office", "CZK", "Kentico CZK - 2023/07/01", "test-order", "JayV", "test-order", "Business - 1 Website Auto-Scalable Subscription (Yearly)", "According to pricelist", "36.00", "36", "Business - 1 Website Auto-Scalable Subscription (Yearly)", "test-order", "CZK", "Business - 1 Website Auto-Scalable Subscription (Yearly)", "False", "SubscriptionLicense", null)]
        public void AsUserIWantAnOrderContainingNewSubscriptionProductHasProperlySetParametersForItsProductAndForItsLicenseAfterProcessing(
                    string orderName, 
                    string billingOffice, 
                    string currency, 
                    string pricelevel, 
                    string customer, 
                    string deliveryContact, 
                    string purchaser, 
                    string existingProduct, 
                    string orderPriceIndexationType, 
                    string contractLength, 
                    string contractLengthExp, 
                    string licenseNameExp, 
                    string licenseAccountExp, 
                    string licenseCurrencyExp, 
                    string licenseProductExp, 
                    string licenseWithSourceCodeExp, 
                    string licenseTypeExp, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Td1dac3e4"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("OrderName", orderName);
            argumentsOfScenario.Add("BillingOffice", billingOffice);
            argumentsOfScenario.Add("Currency", currency);
            argumentsOfScenario.Add("Pricelevel", pricelevel);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("DeliveryContact", deliveryContact);
            argumentsOfScenario.Add("Purchaser", purchaser);
            argumentsOfScenario.Add("ExistingProduct", existingProduct);
            argumentsOfScenario.Add("OrderPriceIndexationType", orderPriceIndexationType);
            argumentsOfScenario.Add("ContractLength", contractLength);
            argumentsOfScenario.Add("ContractLengthExp", contractLengthExp);
            argumentsOfScenario.Add("LicenseNameExp", licenseNameExp);
            argumentsOfScenario.Add("LicenseAccountExp", licenseAccountExp);
            argumentsOfScenario.Add("LicenseCurrencyExp", licenseCurrencyExp);
            argumentsOfScenario.Add("LicenseProductExp", licenseProductExp);
            argumentsOfScenario.Add("LicenseWithSourceCodeExp", licenseWithSourceCodeExp);
            argumentsOfScenario.Add("LicenseTypeExp", licenseTypeExp);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As user I want an order containing new subscription product has properly set para" +
                    "meters for its product and for its license after processing", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("a user is on the orders page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.And("a user creates a new order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "BillingOffice",
                            "Currency",
                            "Pricelevel",
                            "Customer",
                            "DeliveryContact",
                            "Purchaser"});
                table1.AddRow(new string[] {
                            string.Format("{0}", orderName),
                            string.Format("{0}", billingOffice),
                            string.Format("{0}", currency),
                            string.Format("{0}", pricelevel),
                            string.Format("{0}", customer),
                            string.Format("{0}", deliveryContact),
                            string.Format("{0}", purchaser)});
#line 9
 testRunner.And("the order data is set", ((string)(null)), table1, "And ");
#line hidden
#line 12
 testRunner.And("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
 testRunner.And(string.Format("the order has an order product with {0}", existingProduct), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "ContractLength",
                            "Description"});
                table2.AddRow(new string[] {
                            string.Format("{0}", contractLength),
                            "test"});
#line 14
 testRunner.And("the product data is set", ((string)(null)), table2, "And ");
#line hidden
#line 17
 testRunner.And("user closes entity going back to order with saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "PriceIndexationType"});
                table3.AddRow(new string[] {
                            string.Format("{0}", orderPriceIndexationType)});
#line 18
 testRunner.And("the order data is set", ((string)(null)), table3, "And ");
#line hidden
#line 21
 testRunner.And("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.When("the user processes the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
 testRunner.And("user is going to order product 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
 testRunner.Then(string.Format("product fields are properly set {0}", contractLengthExp), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
 testRunner.Given("user closes entity going back to order with saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 26
 testRunner.And("a license should be bound to the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
 testRunner.When("the user opens the license lookup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Account",
                            "Currency",
                            "Product",
                            "WithSourceCode",
                            "LicenseType"});
                table4.AddRow(new string[] {
                            string.Format("{0}", licenseNameExp),
                            string.Format("{0}", licenseAccountExp),
                            string.Format("{0}", licenseCurrencyExp),
                            string.Format("{0}", licenseProductExp),
                            string.Format("{0}", licenseWithSourceCodeExp),
                            string.Format("{0}", licenseTypeExp)});
#line 28
 testRunner.Then("license parameters are properly set", ((string)(null)), table4, "Then ");
#line hidden
#line 31
 testRunner.Given("user closes entity going back to order with saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
 testRunner.And("user goes to related activities and select email 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.Then("email exists and it is a draft", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As user I want the renewal is splitted to renewal and reinstatement when license " +
            "expiration is before order processing, order processing is performed within the " +
            "grace period")]
        [NUnit.Framework.CategoryAttribute("T99707a5f")]
        [NUnit.Framework.TestCaseAttribute("Kentico software CZ s.r.o. - International Office", "CZK", "Kentico CZK - 2023/07/01", "Business - 1 Website Auto-Scalable Subscription (Yearly)", "12", "Xperience Subscription Renewal", "10000", "-10", null)]
        [NUnit.Framework.TestCaseAttribute("Kentico software CZ s.r.o. - International Office", "CZK", "Kentico CZK - 2023/07/01", "Business - 1 Website Auto-Scalable Subscription (Yearly)", "7.19", "Xperience Subscription Renewal", "7600", "-14", null)]
        [NUnit.Framework.TestCaseAttribute("Kentico software CZ s.r.o. - International Office", "CZK", "Kentico CZK - 2023/07/01", "Business - 1 Website Auto-Scalable Subscription (Yearly)", "24", "Xperience Subscription Renewal", "22600", "-2", null)]
        public void AsUserIWantTheRenewalIsSplittedToRenewalAndReinstatementWhenLicenseExpirationIsBeforeOrderProcessingOrderProcessingIsPerformedWithinTheGracePeriod(string billingOffice, string currency, string pricelevel, string existingProduct, string renewalContractLength, string renewalProduct, string renewalPricePerUnit, string numberOfdays, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "T99707a5f"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("BillingOffice", billingOffice);
            argumentsOfScenario.Add("Currency", currency);
            argumentsOfScenario.Add("Pricelevel", pricelevel);
            argumentsOfScenario.Add("ExistingProduct", existingProduct);
            argumentsOfScenario.Add("RenewalContractLength", renewalContractLength);
            argumentsOfScenario.Add("RenewalProduct", renewalProduct);
            argumentsOfScenario.Add("RenewalPricePerUnit", renewalPricePerUnit);
            argumentsOfScenario.Add("NumberOfdays", numberOfdays);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As user I want the renewal is splitted to renewal and reinstatement when license " +
                    "expiration is before order processing, order processing is performed within the " +
                    "grace period", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 43
 testRunner.Given("a user is on the orders page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 44
 testRunner.And("a user creates a new order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "BillingOffice",
                            "Currency",
                            "Pricelevel",
                            "Customer",
                            "DeliveryContact",
                            "Purchaser"});
                table5.AddRow(new string[] {
                            "TestReinstatement_T99707a5f",
                            string.Format("{0}", billingOffice),
                            string.Format("{0}", currency),
                            string.Format("{0}", pricelevel),
                            "UITest_Corkery, Feeney and Bernier.knjz",
                            "Hoyt UITest_Stokes",
                            "UITest_Corkery, Feeney and Bernier.knjz"});
#line 45
 testRunner.And("the order data is set", ((string)(null)), table5, "And ");
#line hidden
#line 48
 testRunner.And("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
 testRunner.And(string.Format("the order has an order product with {0}", existingProduct), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "ContractLength"});
                table6.AddRow(new string[] {
                            "12"});
#line 50
 testRunner.And("the product data is set", ((string)(null)), table6, "And ");
#line hidden
#line 53
 testRunner.And("user closes entity going back to order with saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "PriceIndexationType"});
                table7.AddRow(new string[] {
                            "According to pricelist"});
#line 54
 testRunner.And("the order data is set", ((string)(null)), table7, "And ");
#line hidden
#line 57
 testRunner.And("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
 testRunner.And("the user processes the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.And("a license should be bound to the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
 testRunner.And("the user opens the license lookup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.And("a form is switched to \"License Office Form_UCI\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
 testRunner.And(string.Format("the license expires in {0} days", numberOfdays), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
 testRunner.And("the user saves the license", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.And("the user creates a new order from the license", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "BillingOffice",
                            "Currency",
                            "Pricelevel",
                            "Customer",
                            "DeliveryContact",
                            "Purchaser"});
                table8.AddRow(new string[] {
                            "RenewalOrder_T99707a5f",
                            string.Format("{0}", billingOffice),
                            string.Format("{0}", currency),
                            string.Format("{0}", pricelevel),
                            "UITest_Corkery, Feeney and Bernier.knjz",
                            "Hoyt UITest_Stokes",
                            "UITest_Corkery, Feeney and Bernier.knjz"});
#line 65
 testRunner.And("the order data is set", ((string)(null)), table8, "And ");
#line hidden
#line 68
 testRunner.And("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
 testRunner.And(string.Format("the order has not saved an order product called {0}", renewalProduct), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.And("user changes pricing to \"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "PricePerUnit",
                            "ContractLength"});
                table9.AddRow(new string[] {
                            string.Format("{0}", renewalPricePerUnit),
                            string.Format("{0}", renewalContractLength)});
#line 71
 testRunner.And("the product data is set", ((string)(null)), table9, "And ");
#line hidden
#line 74
 testRunner.And("user saves product", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
 testRunner.And("\"extended amount\" value for field \"ExtendedAmount\" is memorized", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
 testRunner.And("user closes entity going back to order with saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "PriceIndexationType"});
                table10.AddRow(new string[] {
                            "According to pricelist"});
#line 77
 testRunner.And("the order data is set", ((string)(null)), table10, "And ");
#line hidden
#line 80
 testRunner.And("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 81
 testRunner.When("the user processes the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 82
 testRunner.Then("renewal product is splitted to renewal and reinstatement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 83
 testRunner.And("order detail amount is equal to original renewal \"extended amount\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As user I want the renewal product and license fields and email to be set correct" +
            "ly when a renewal order is processed before expiration")]
        [NUnit.Framework.CategoryAttribute("T7086cc1f")]
        public void AsUserIWantTheRenewalProductAndLicenseFieldsAndEmailToBeSetCorrectlyWhenARenewalOrderIsProcessedBeforeExpiration()
        {
            string[] tagsOfScenario = new string[] {
                    "T7086cc1f"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As user I want the renewal product and license fields and email to be set correct" +
                    "ly when a renewal order is processed before expiration", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 93
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 94
 testRunner.Given("a user is on the orders page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 95
 testRunner.And("a user creates a new order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "BillingOffice",
                            "Currency",
                            "Pricelevel",
                            "Customer",
                            "DeliveryContact",
                            "Purchaser"});
                table11.AddRow(new string[] {
                            "Test_Renewal_Order",
                            "Kentico software CZ s.r.o. - International Office",
                            "CZK",
                            "Kentico CZK - 2023/07/01",
                            "test-order",
                            "JayV",
                            "test-order"});
#line 96
 testRunner.And("the order data is set", ((string)(null)), table11, "And ");
#line hidden
#line 99
 testRunner.And("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 100
 testRunner.And("the order has an order product with Business - 1 Website Auto-Scalable Subscripti" +
                        "on (Yearly)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 101
 testRunner.And("user closes entity going back to order with saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "PriceIndexationType"});
                table12.AddRow(new string[] {
                            "According to pricelist"});
#line 102
 testRunner.And("the order data is set", ((string)(null)), table12, "And ");
#line hidden
#line 105
 testRunner.And("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
 testRunner.And("the user processes the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
 testRunner.And("a license should be bound to the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
 testRunner.And("the user opens the license lookup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
 testRunner.And("the original license expiration is memorized as key \"original license expiration\"" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 110
 testRunner.And("the user creates a new order from the license", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "BillingOffice",
                            "Currency",
                            "Pricelevel",
                            "Customer",
                            "DeliveryContact",
                            "Purchaser"});
                table13.AddRow(new string[] {
                            "Test_Renewal_Order",
                            "Kentico software CZ s.r.o. - International Office",
                            "CZK",
                            "Kentico CZK - 2023/07/01",
                            "test-order",
                            "JayV",
                            "test-order"});
#line 111
 testRunner.And("the order data is set", ((string)(null)), table13, "And ");
#line hidden
#line 114
 testRunner.And("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
 testRunner.And("the order has an order product with Xperience Subscription Renewal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "ContractLength"});
                table14.AddRow(new string[] {
                            "24"});
#line 116
 testRunner.And("the product data is set", ((string)(null)), table14, "And ");
#line hidden
#line 119
 testRunner.And("user closes entity going back to order with saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "PriceIndexationType"});
                table15.AddRow(new string[] {
                            "According to pricelist"});
#line 120
 testRunner.And("the order data is set", ((string)(null)), table15, "And ");
#line hidden
#line 123
 testRunner.And("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 124
 testRunner.And("the user processes the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
 testRunner.And("user is going to order product 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 126
 testRunner.And("starts on is set correctly based on date of \"original license expiration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
 testRunner.And("expires on is set correctly based on CL \"24\" and date of \"original license expira" +
                        "tion\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
 testRunner.And("the renewal product expiration is memorized as \"renewal product expiration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 129
 testRunner.And("user closes entity going back to order with saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 130
 testRunner.And("a license should be bound to the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
 testRunner.And("the user opens the license lookup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 132
 testRunner.And("the license expiration is set correctly to the renewal product expiration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 133
 testRunner.And("user closes entity going back to order with saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 134
 testRunner.When("user goes to related activities and select email 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 135
 testRunner.Then("email exists and it is sent", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As user I want the renewal product and license fields to be set correctly when a " +
            "renewal order is processed after grace period")]
        [NUnit.Framework.CategoryAttribute("Tb823f2b7")]
        public void AsUserIWantTheRenewalProductAndLicenseFieldsToBeSetCorrectlyWhenARenewalOrderIsProcessedAfterGracePeriod()
        {
            string[] tagsOfScenario = new string[] {
                    "Tb823f2b7"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As user I want the renewal product and license fields to be set correctly when a " +
                    "renewal order is processed after grace period", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 139
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 140
 testRunner.Given("a user is on the orders page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 141
 testRunner.And("a user creates a new order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "BillingOffice",
                            "Currency",
                            "Pricelevel",
                            "Customer",
                            "DeliveryContact",
                            "Purchaser"});
                table16.AddRow(new string[] {
                            "Test_Renewal_Order_AfterGP",
                            "Kentico software CZ s.r.o. - International Office",
                            "CZK",
                            "Kentico CZK - 2023/07/01",
                            "test-order",
                            "JayV",
                            "test-order"});
#line 142
 testRunner.And("the order data is set", ((string)(null)), table16, "And ");
#line hidden
#line 145
 testRunner.And("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
 testRunner.And("the order has an order product with Business - 1 Website Auto-Scalable Subscripti" +
                        "on (Yearly)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
 testRunner.And("user closes entity going back to order with saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "PriceIndexationType"});
                table17.AddRow(new string[] {
                            "According to pricelist"});
#line 148
 testRunner.And("the order data is set", ((string)(null)), table17, "And ");
#line hidden
#line 151
 testRunner.And("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 152
 testRunner.And("the user processes the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
 testRunner.And("a license should be bound to the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 154
 testRunner.And("the user opens the license lookup", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 155
 testRunner.And("the license expires in -45 days", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 156
 testRunner.And("the user saves the license", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 157
 testRunner.And("the user creates a new order from the license", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "BillingOffice",
                            "Currency",
                            "Pricelevel",
                            "Customer",
                            "DeliveryContact",
                            "Purchaser"});
                table18.AddRow(new string[] {
                            "Test_Renewal_Order_AfterGP",
                            "Kentico software CZ s.r.o. - International Office",
                            "CZK",
                            "Kentico CZK - 2023/07/01",
                            "test-order",
                            "JayV",
                            "test-order"});
#line 158
 testRunner.And("the order data is set", ((string)(null)), table18, "And ");
#line hidden
#line 161
 testRunner.And("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 162
 testRunner.And("the order has an order product with Xperience Subscription Renewal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "ContractLength"});
                table19.AddRow(new string[] {
                            "12"});
#line 163
 testRunner.And("the product data is set", ((string)(null)), table19, "And ");
#line hidden
#line 166
 testRunner.And("starts on and expires on fields are empty and not editable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 167
 testRunner.And("user closes entity going back to order with saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "PriceIndexationType"});
                table20.AddRow(new string[] {
                            "According to pricelist"});
#line 168
 testRunner.And("the order data is set", ((string)(null)), table20, "And ");
#line hidden
#line 171
 testRunner.And("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 172
 testRunner.And("the user processes the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 173
 testRunner.And("the date of processing is memorized as \"date fulfilled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 174
 testRunner.When("user is going to order product 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 175
 testRunner.Then("the order product starts on is set as date of fulfilled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 176
 testRunner.And("user closes entity going back to order with saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
