// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dynamics.UITests.OrderProcess.FeatureFiles
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("TestPriceIndexation")]
    [NUnit.Framework.CategoryAttribute("S276c408f")]
    public partial class TestPriceIndexationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "S276c408f"};
        
#line 1 "TestPriceIndexation.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "OrderProcess/FeatureFiles", "TestPriceIndexation", "Feature for planning price indexation", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As user I want the new renewal period is visible when I click the add renewal per" +
            "iod button,")]
        [NUnit.Framework.CategoryAttribute("Tdef58d0e")]
        [NUnit.Framework.TestCaseAttribute("ContractedUIControlTest_TC01", "Kentico software CZ s.r.o. - International Office", "CZK", "Kentico CZK - 2023/07/01", "test-order", "JayV", "test-order", "Business - 1 Website Auto-Scalable Subscription (Yearly)", "Contracted", null)]
        public void AsUserIWantTheNewRenewalPeriodIsVisibleWhenIClickTheAddRenewalPeriodButton(string orderName, string billingOffice, string currency, string pricelevel, string customer, string deliveryContact, string purchaser, string existingProduct, string orderPriceIndexationType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Tdef58d0e"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("OrderName", orderName);
            argumentsOfScenario.Add("BillingOffice", billingOffice);
            argumentsOfScenario.Add("Currency", currency);
            argumentsOfScenario.Add("Pricelevel", pricelevel);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("DeliveryContact", deliveryContact);
            argumentsOfScenario.Add("Purchaser", purchaser);
            argumentsOfScenario.Add("ExistingProduct", existingProduct);
            argumentsOfScenario.Add("OrderPriceIndexationType", orderPriceIndexationType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As user I want the new renewal period is visible when I click the add renewal per" +
                    "iod button,", "\terror message is raised when first renewal is not filled or there is a gap among" +
                    " renewals\r\n\tand I am able to save order when contracted values are filled with n" +
                    "o gap and first renewal is filled", tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
 testRunner.Given("a user is on the orders page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.And("a user creates a new order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "BillingOffice",
                            "Currency",
                            "Pricelevel",
                            "Customer",
                            "DeliveryContact",
                            "Purchaser"});
                table27.AddRow(new string[] {
                            string.Format("{0}", orderName),
                            string.Format("{0}", billingOffice),
                            string.Format("{0}", currency),
                            string.Format("{0}", pricelevel),
                            string.Format("{0}", customer),
                            string.Format("{0}", deliveryContact),
                            string.Format("{0}", purchaser)});
#line 11
 testRunner.And("the order data is set", ((string)(null)), table27, "And ");
#line hidden
#line 14
 testRunner.And("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.And(string.Format("the order has an order product with {0}", existingProduct), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.And("user closes entity going back to order with saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "PriceIndexationType"});
                table28.AddRow(new string[] {
                            string.Format("{0}", orderPriceIndexationType)});
#line 17
 testRunner.And("the order data is set", ((string)(null)), table28, "And ");
#line hidden
#line 20
 testRunner.And("Input for first renewal is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.And("new second renewal button is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.When("user clicks on second renewal button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
 testRunner.Then("Input for second renewal is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
 testRunner.And("new third renewal button is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.When("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
 testRunner.Then("error message for contracted control is raised \"Please enter valid data. \'1st Ren" +
                        "ewal\' cannot be empty.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
 testRunner.And("warning notification for contracted control is raised \"Price Indexation Data : Pl" +
                        "ease enter valid data. \'1st Renewal\' cannot be empty.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.When("user clicks on third renewal button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
 testRunner.Then("input for third renewal is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
 testRunner.Given("user fills first renewal 1000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 31
 testRunner.And("user fills third renewal 3000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.When("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
 testRunner.Then("error message for contracted control is raised \"Please enter valid data. There ca" +
                        "nnot be gaps between the renewal prices.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
 testRunner.And("warning notification for contracted control is raised \"Price Indexation Data : Pl" +
                        "ease enter valid data. There cannot be gaps between the renewal prices.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.Given("user fills second renewal 2000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 36
 testRunner.When("user saves and closes the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.Then("order is saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 38
 testRunner.When("user removes second renewal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 39
 testRunner.Then("only first and second renewal input is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
 testRunner.And("price of second renewal is 3000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 41
 testRunner.When("user removes second renewal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 42
 testRunner.And("user removes first renewal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
 testRunner.Then("Input for first renewal is present", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
 testRunner.Given("user fills first renewal 1000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 45
 testRunner.When("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
 testRunner.And("the user processes the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.Then("first renewal input is read only", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("As user I am not able to put negative values to contracted and percentage rule co" +
            "ntrol")]
        [NUnit.Framework.CategoryAttribute("Tbaacea5c")]
        [NUnit.Framework.TestCaseAttribute("ContractedAndPercentageUIControlTest_TC02", "Kentico software CZ s.r.o. - International Office", "CZK", "Kentico CZK - 2023/07/01", "test-order", "JayV", "test-order", "Business - 1 Website Auto-Scalable Subscription (Yearly)", null)]
        public void AsUserIAmNotAbleToPutNegativeValuesToContractedAndPercentageRuleControl(string orderName, string billingOffice, string currency, string pricelevel, string customer, string deliveryContact, string purchaser, string existingProduct, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Tbaacea5c"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("OrderName", orderName);
            argumentsOfScenario.Add("BillingOffice", billingOffice);
            argumentsOfScenario.Add("Currency", currency);
            argumentsOfScenario.Add("Pricelevel", pricelevel);
            argumentsOfScenario.Add("Customer", customer);
            argumentsOfScenario.Add("DeliveryContact", deliveryContact);
            argumentsOfScenario.Add("Purchaser", purchaser);
            argumentsOfScenario.Add("ExistingProduct", existingProduct);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("As user I am not able to put negative values to contracted and percentage rule co" +
                    "ntrol", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 55
 testRunner.Given("a user is on the orders page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 56
 testRunner.And("a user creates a new order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "BillingOffice",
                            "Currency",
                            "Pricelevel",
                            "Customer",
                            "DeliveryContact",
                            "Purchaser"});
                table29.AddRow(new string[] {
                            string.Format("{0}", orderName),
                            string.Format("{0}", billingOffice),
                            string.Format("{0}", currency),
                            string.Format("{0}", pricelevel),
                            string.Format("{0}", customer),
                            string.Format("{0}", deliveryContact),
                            string.Format("{0}", purchaser)});
#line 57
 testRunner.And("the order data is set", ((string)(null)), table29, "And ");
#line hidden
#line 60
 testRunner.And("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
 testRunner.And(string.Format("the order has an order product with {0}", existingProduct), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
 testRunner.And("user closes entity going back to order with saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "PriceIndexationType"});
                table30.AddRow(new string[] {
                            "Contracted"});
#line 63
 testRunner.And("the order data is set", ((string)(null)), table30, "And ");
#line hidden
#line 66
 testRunner.And("user fills first renewal -1000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
 testRunner.When("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 68
 testRunner.Then("price of first renewal is 1000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "PriceIndexationType"});
                table31.AddRow(new string[] {
                            "Percentage rule"});
#line 69
 testRunner.Given("the order data is set", ((string)(null)), table31, "Given ");
#line hidden
#line 72
 testRunner.And("renewal base price is set 100000000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
 testRunner.And("maximum percentage is set 125", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.Then("input overflow validation is displayed in count 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 75
 testRunner.Given("user clear renewal base price", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 76
 testRunner.And("renewal base price is set -1000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
 testRunner.And("user clear maximum percentage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.And("maximum percentage is set -10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
 testRunner.When("the user saves the order", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 80
 testRunner.Then("renewal base price is 1000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 81
 testRunner.And("maximum percentage rule is 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
